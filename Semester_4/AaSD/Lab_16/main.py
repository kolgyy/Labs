def knapsack(values, weights, capacity):
    """
    Функция для решения задачи о рюкзаке с использованием динамического программирования.
    :param values: список ценностей предметов
    :param weights: список весов предметов
    :param capacity: максимальная вместимость рюкзака
    :return: максимальная суммарная ценность предметов, которые можно поместить в рюкзак
    """
    n = len(values)  # Количество предметов
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]  # Создание двумерного массива для хранения результатов подзадач

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:  # Если вес текущего предмета не превышает текущую вместимость рюкзака
                # Выбираем максимальное значение между:
                # 1. Суммой ценности текущего предмета и максимальной ценностью для оставшейся вместимости
                # 2. Максимальной ценностью без включения текущего предмета
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                # Если вес текущего предмета превышает текущую вместимость рюкзака,
                # то максимальная ценность остается такой же, как и без включения текущего предмета
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

# Пример использования
values = [60, 100, 120, 150]
weights = [10, 20, 30, 15]
capacity = 50

max_value = knapsack(values, weights, capacity)
print("Максимальная ценность предметов в рюкзаке:", max_value)