#include <iostream>

using std::cout;
using std::cin;
using std::endl;

// Insertion sort //


void Insertion_sort(int* arr, int size) {
	// ¬о внешнем цикле мы пробегаем по неотсортированной части массива
	int i, j, key; //
	for (i = 1; i < size; i++) { // Ќачинаем проходить со 2 элемента, так как первый относитс€ к отсортированному массиву
		key = arr[i]; // Ёто тот элемент, который мы будем пробовать вставить в отсортированную часть массива
		j = i - 1; // Ётим самым мы устанавливаем указатель i на последний элемент в отсортированной части.
		// ÷икл while сдвигает элементы влево и пытаетс€ найти подход€щее место в отсортированной части.
		while (j >= 0 && arr[j] > key) { // j >= 0 дл€ того, чтобы указатель j не ушел за массив влево (в отрицательную часть).
			// arr[j] > key - мы сравниваем элемент, на который указывает j с тем элементом, который мы будем пробовать отсортировать.
			arr[j + 1] = arr[j]; // ≈сли элемент j больше, то мы переносим его вправо.
			arr[j] = key; // ј на прошлое место ставим тот элемент, которому ищем место.
			j--; // ƒалее уменьшаем j, чтобы выйти из цикла while в тот момент, когда нельз€ будет больше отсортировывать.

		}
	}
}


int main() {

	setlocale(LC_ALL, "Russian");
	int size;
	cout << "¬ведите размер массива: " << endl;
	cin >> size;
	
	int* arr = new int [size];
	
	cout << "¬ведите элементы массива: " << endl;
	for (int i = 0; i < size; i++) {
		cin >> arr[i];
	}

	Insertion_sort(arr, size);

	cout << "ќтсортированный массив: " << endl;
	for (int i = 0; i < size; i++) {
		cout << arr[i] << " ";
	}

	delete[] arr; // Ќе забываем отчистить пам€ть!

	return 0;
}